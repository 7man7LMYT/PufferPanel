#!/usr/bin/env php

<?php

require_once __DIR__ . '/../src/core/oauth2.php';

use \PDO as PDO,
    \PufferPanel\Core\OAuthService as OauthService;

echo "Enter MySQL information to update the panel\n";

echo "Host [localhost]: ";
$host = trim(fgets(STDIN));
if (strlen($host) == 0) {
    $host = 'localhost';
}

echo "Port [3306]: ";
$port = trim(fgets(STDIN));
if (strlen($port) == 0) {
    $port = '3306';
}

$db = 'pufferpanel';

echo "User [root]: ";
$user = trim(fgets(STDIN));
if (strlen($user) == 0) {
    $user = 'root';
}

function hide_term()
{
    if (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN')
        system('stty -echo');
}

function restore_term()
{
    if (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN')
        system('stty echo');
}

hide_term();
$validCreds = false;
do {
    echo "Password: ";
    $pass = rtrim(fgets(STDIN), PHP_EOL);
    try {
        $pdo = new PDO('mysql:host=' . $host . ';port=' . $port . ';dbname=' . $db . ';', $user, $pass);
        $validCreds = true;
    } catch (PDOException $e) {
        echo 'Failed to connect to database: ' . $e->getMessage();
    }
} while (!$validCreds);
restore_term();

echo "\n";

echo 'Applying database changes';

try {
    $pdo->prepare('
      ALTER TABLE nodes ADD COLUMN docker TINYINT(4) NOT NULL DEFAULT \'1\'
    ')->execute();
} catch (PDOException $e) {
    echo 'Failed to apply docker column addition, probably already exists: ' . $e->getMessage();
    echo 'This error can be ignored if this is the case';
}

try {
    $pdo->prepare('
CREATE TABLE IF NOT EXISTS `oauth_clients` (
	`id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	`client_id` CHAR(16) NOT NULL,
	`client_secret` CHAR(64) NOT NULL,
	`user_id` INT(10) UNSIGNED NOT NULL,
	`server_id` INT(10) UNSIGNED NOT NULL,
	`scopes` VARCHAR(1000) NOT NULL DEFAULT \'\',
	`name` VARCHAR(128) NOT NULL,
	`description` VARCHAR(1024) NOT NULL DEFAULT \'No description\',
	PRIMARY KEY (`id`),
	INDEX `FK_oauth_clients_users` (`user_id`),
	INDEX `FK_oauth_clients_servers` (`server_id`),
	INDEX `client_id` (`client_id`)
) ENGINE=InnoDB;
')->execute();

    $pdo->prepare('
CREATE TABLE IF NOT EXISTS `oauth_access_tokens` (
  `access_token` CHAR(128) NOT NULL,
  `oauthClientId` INT(10) UNSIGNED NOT NULL,
  `expiretime` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `scopes` VARCHAR(1000) NOT NULL DEFAULT \'\',
  PRIMARY KEY (`access_token`),
  UNIQUE INDEX `access_token` (`access_token`),
  INDEX `FK_oauth_access_tokens_oauth_clients` (`oauthClientId`),
  CONSTRAINT `FK_oauth_access_tokens_oauth_clients` FOREIGN KEY (`oauthClientId`) REFERENCES `oauth_clients` (`id`)
) ENGINE=InnoDB;

DROP EVENT IF EXISTS `oauthTokenCleaner`;
CREATE EVENT `oauthTokenCleaner` ON SCHEDULE EVERY 5 MINUTE ON COMPLETION NOT PRESERVE ENABLE COMMENT \'\' DO DELETE FROM oauthAccessTokens WHERE expireTime < NOW();
')->execute();

    $oauth = OAuthService::Get();

    $serversQuery = $pdo->prepare('SELECT id, owner_id AS owner FROM servers');
    $serversQuery->execute();
    $servers = $serversQuery->fetchAll(PDO::FETCH_ASSOC);
    foreach ($servers as $server) {
        $serverId = $server['id'];
        $userId = $server['owner'];
        $oauth->create($pdo,
            $userId,
            $serverId,
            '.internal_' . $userId . '_' . $serverId,
            OAuthService::getUserScopes(),
            'internal_use',
            'internal_use'
        );
    }
} catch (PDOException $e) {
    echo 'Error applying DB changes, panel will not function without updates';
    echo "\n";
    echo $e->getMessage();
    exit(1);
}

try {
    $pdo->prepare('ALTER TABLE servers DROP FOREIGN KEY FK_servers_plugin')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN plugin')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN daemon_startup')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN daemon_variables')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN max_ram')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN disk_space')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN cpu_limit')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN block_io')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN server_ip')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN server_port')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN sftp_user')->execute();
    $pdo->prepare('ALTER TABLE servers DROP COLUMN installed')->execute();
    $pdo->prepare('ALTER TABLE nodes DROP COLUMN daemon_base_dir')->execute();
} catch (PDOException $e) {
    echo 'Failed to delete un-used columns from the database, this should not impact usage though:';
    echo "\n";
    echo $e->getMessage();
}

echo 'Database changes complete';

exit(0);