<?php
/*
    PufferPanel - A Minecraft Server Management Panel
    Copyright (c) 2013 Dane Everitt
 
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/.
 */
session_start();
require_once('../../../core/framework/framework.core.php');

if($core->framework->auth->isLoggedIn($_SERVER['REMOTE_ADDR'], $core->framework->auth->getCookie('pp_auth_token'), $core->framework->auth->getCookie('pp_server_hash')) === true){

        
	/*
	 * Verify that Server Port is set Correctly
	 */
	$connection = $core->framework->ssh->generateSSH2Connection(array(
		'ip' => $core->framework->server->nodeData('sftp_ip'),
		'user' => $core->framework->server->getData('ftp_user'),
		'pass' => $core->framework->server->getData('ftp_pass'),
		'iv' => $core->framework->server->getData('encryption_iv')
	), null, true);
	$sftp = ssh2_sftp($connection);
		
	/*
	 * Open Stream for Reading/Writing
	 */	
	$rewrite = false;							
	$stream = fopen("ssh2.sftp://".$sftp."/server/server.properties", 'r+');
	
		if(!$stream){
		
			/*
			 * Create server.properties
			 */
			$generateProperties = '
#Minecraft Server Properties
#Generated by PufferPanel
generator-settings=
op-permission-level=4
allow-nether=true
level-name=world
enable-query=true
allow-flight=false
announce-player-achievements=true
server-port='.$core->framework->server->getData('server_port').'
query.port='.$core->framework->server->getData('server_port').'
level-type=DEFAULT
enable-rcon=false
force-gamemode=false
level-seed=
server-ip='.$core->framework->server->getData('server_ip').'
max-build-height=256
spawn-npcs=true
white-list=false
debug=false
spawn-animals=true
texture-pack=
snooper-enabled=true
hardcore=false
online-mode=true
resource-pack=
pvp=true
difficulty=1
enable-command-block=false
gamemode=1
player-idle-timeout=0
max-players=20
spawn-monsters=true
generate-structures=true
view-distance=10
spawn-protection=16
motd=A Minecraft Server';

			
				if(!fwrite($stream, $generateProperties)){
		
                    $core->framework->log->getUrl()->addLog(3, 1, array('system.create_serverprops_failed', 'Unable to create a servers.properties file.'));
					exit('Unable to create new server.properties. Contact support ASAP.');
		
				}
			
            $core->framework->log->getUrl()->addLog(0, 1, array('system.create_serverprops', 'A new server.properties file was created for your server.'));						
		
		}
		
		/*
		 * Passed Inital Checks
		 */
		$contents = fread($stream, filesize("ssh2.sftp://".$sftp."/server/server.properties"));
		
		/*
		 * Generate Save File
		 */
		$saveDir = '/tmp/'.$core->framework->server->getData('hash').'/';
		if(!is_dir($saveDir)){
			mkdir($saveDir);
		}
		
		$fp = fopen($saveDir.'server.properties.savefile', 'w');
		fwrite($fp, $contents);
		fclose($fp);
		
		$newContents = $contents;
		fclose($stream);
		$lines = file($saveDir.'server.properties.savefile');
		
			foreach($lines as $line){
			
				$var = explode('=', $line);
				
					if($var[0] == 'server-port' && $var[1] != $core->framework->server->getData('server_port')){
						//Reset Port
						$newContents = str_replace('server-port='.$var[1], "server-port=".$core->framework->server->getData('server_port')."\n", $newContents);
						$rewrite = true;
					}else if($var[0] == 'online-mode' && $var[1] == 'false'){
						//Force Online Mode
						$newContents = str_replace('online-mode='.$var[1], "online-mode=true\n", $newContents);
						$rewrite = true;
					}else if($var[0] == 'enable-query' && $var[1] != 'true'){
						//Reset Query Port
						$newContents = str_replace('enable-query='.$var[1], "enable-query=true\n", $newContents);
						$rewrite = true;
					}else if($var[0] == 'query.port' && $var[1] != $core->framework->server->getData('server_port')){
						//Reset Query Port
						$newContents = str_replace('query.port='.$var[1], "query.port=".$core->framework->server->getData('server_port')."\n", $newContents);
						$rewrite = true;
					}else if($var[0] == 'server-ip' && $var[1] != $core->framework->server->getData('server_ip')){
						//Reset Query Port
						$newContents = str_replace('server-ip='.$var[1], "server-ip=".$core->framework->server->getData('server_ip')."\n", $newContents);
						$rewrite = true;
					}
			
			}
			
				/*
				 * Write New Data
				 */
				if($rewrite === true){
				
					$stream = fopen("ssh2.sftp://".$sftp."/server/server.properties", 'w+');
				
						if(!fwrite($stream, $newContents)){
				
                            $core->framework->log->getUrl()->addLog(3, 1, array('system.update_serverprops_failed', 'Unable to update the servers.properties file.'));
							exit('Unable to fix broken server.properties. Please contact support.');
				
						}
				
                    $core->framework->log->getUrl()->addLog(0, 0, array('system.serverprops_updated', 'The server properties file was updated to match the assigned information.'));
					fclose($stream);
					
				}

    /*
	 * Connect and Run Function
	 */
	$context = stream_context_create(array(
		"http" => array(
			"method" => "GET",
			"timeout" => 3
		)
	));
	$gatherData = @file_get_contents("http://".$core->framework->server->nodeData('sftp_ip').":8003/gameservers/".$core->framework->server->getData('gsd_id')."/on", 0, $context);
	
	if($gatherData != "\"ok\"")
		exit("An error was encountered with this AJAX request.");
			
	/*
	 * Run CPU Limit
	 * cpulimit -p #### -l #### -d
	 */
	sleep(1);
	$gatherData = @file_get_contents("http://".$core->framework->server->nodeData('sftp_ip').":8003/gameservers/".$core->framework->server->getData('gsd_id'), 0, $context);
	
	$data = json_decode($gatherData, true);
	
		if(!array_key_exists('pid', $data))
			exit("Unable to get PID.");
	
	if($core->framework->server->getData('cpu_limit') > 0){
	
		$getCommandData = $core->framework->ssh->generateSSH2Connection(array(
			'ip' => $core->framework->server->nodeData('sftp_ip'),
			'user' => $core->framework->server->nodeData('username')
		), array(
			'pub' => $core->framework->server->nodeData('ssh_pub'),
			'priv' => $core->framework->server->nodeData('ssh_priv'),
			'secret' => $core->framework->server->nodeData('ssh_secret'),
			'secret_iv' => $core->framework->server->nodeData('ssh_secret_iv')
		))->executeSSH2Command('cpulimit -p '.$data['pid'].' -l '.$core->framework->server->getData('cpu_limit').' -d', true);
		
	}
	
	echo 'ok';
		
}else{

	die('Invalid Authentication.');

}
?>